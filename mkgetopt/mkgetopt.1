.\" Man page generated from reStructuredText.
.
.TH MKGETOPT.PY 1 "" "1.0.2" "Development Utilities"
.SH NAME
mkgetopt.py \- Generate type-safe, getopt_long() option parsing routines.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
mkgetopt.py [options] inputfile
.sp
mkgetopt.py \- is a python script to generate type\-safe, \fBgetopt_long()\fP
option parsing routines.
.sp
The script reads an specification input file containing the
command line options that must be understood by a C/C++ program. It
generates two files \- a "C" header file and a "C" source file.
.SS Options
.sp
Optional arguments are:
.INDENT 0.0
.TP
.BI \-\-output\-prefix\fB= p\fP,\fB \ \-o \ p
Use \(aqp\(aq as the prefix for the output files. If this options is not
used, the prefix is derived from the name of the input file by
discarding everything past the \fIlast\fP \fB\&.\fP (dot) character. The
output "C" file has a \fB\&.c\fP suffix and the header file has a \fB\&.h\fP
suffix.
.sp
e.g.,
.sp
input filename=opt.in output prefix=opt, cfile=opt.c, header
file=opt.h
.sp
input filename=opt.x.in output prefix=opt.x cfile=opt.x.c header
file=opt.x.h
.TP
.BI \-\-header\fB= f\fP,\fB \ \-h \ f
Use \(aqf\(aq as the output header filename. If this option is used, it
overrides the \-\-output\-prefix option.
.TP
.BI \-\-source\fB= f\fP,\fB \ \-s \ f
Use \(aqf\(aq as the output source filename. If this option is used, it
overrides the \-\-output\-prefix option.
.TP
.BI \-\-sym\-prefix\fB= s
Use \(aqs\(aq as the prefix for all generated \fIsymbols\fP: functions, struct
tags., etc. Any \(aq%prefix\(aq directive present in the input file will
over\-ride this command line parameter.
.TP
.B \-\-help\fP,\fB  \-h
Show this help message and quit.
.TP
.B \-\-man\fP,\fB  \-\-verbose\-help
Show a man page with examples and more details.
.UNINDENT
.SH DESCRIPTION
.sp
The program reads an input file describing the command line options that
must be understood by a C/C++ program and, generates a function to parse
the command line options. The parsed options are filled into a \fBstruct\fP
for easy retrieval by the programmer. The \fBstruct\fP tag and definition
are autogenerated from the input file. The generated programs make use of
\fBgetopt_long()\fP option parsing routines.
.sp
The program generates two output files. The names of the generated files
are derived from the input file by stripping the suffix and replacing it
with either .c or .h. e.g., if the input file is called opt.in, then,
the output files are opt.c and opt.h.
.SS C File
.sp
The \fBC\fP source file contains a function for parsing the command line
options.  This file exports a single global function with "C" linkage. By
default it is called \fBopt_parse()\fP\&. The prefix \fBmain_\fP is the
default prefix; it can be changed by different means. See succeeding
sections to understand more.
.sp
The generated function has the following prototype:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
extern "C" int opt_parse(int argc, char * const *argv);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The return value of this function is 0 if the command line arguments
were successfully parsed and non\-zero otherwise.
.sp
If the return value is non\-zero, the \fBgetopt_long()\fP library
would\(aqve emited suitable error messages for un\-recognized options or
other errors. Thus, the only action to be taken in this case is to
exit the program or re\-accept the command line arguments.
.sp
The \fBopt_parse()\fP function uses the well known \fBgetopt_long()\fP
function as well as the GNU \fBerror()\fP functions. Other than these two external
functions, the generated code uses only the standard "C" library. In
case the function \fBerror()\fP is not available, a simple
implementation is as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

void error(int status, int errnum, const char * message, ...)
{
    va_list ap;

    fflush(stdout);
    fflush(stderr);

    if (errnum < 0)
        errnum = \-errnum;

    va_start(ap, message);
    vfprintf(stderr, message, ap);

    if (errnum)
        fprintf(stderr, ": %s", strerror(errnum));

    fputc(\(aq\en\(aq, stderr);
    fflush(stderr);

    if (status)
        exit(status);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For those users not wishing to use the GNU GPL version of
\fBgetopt_long()\fP NetBSD has an excellent implementation of the same
function but licensed under BSD terms.
.SS H File
.sp
The header file contains structure definitions and prototypes for
the functions that are provided in the \fB\&.c\fP file. In addition, if
the generated \fB\&.c\fP file requires additional functions to be
implemented by the programmer, then their prototypes are also listed
in the header file.
.sp
The default name for the generated struct is \fBopt_option\fP\&. As
explained before, the prefix \fBmain\fP can be changed via inline
directives in the input file or the command line.
.sp
For each option specified in the option input file, the struct
contains two members:
.INDENT 0.0
.IP 1. 3
.INDENT 3.0
.TP
.B One member representing the option
This member has a type that appropriately represents the option
(e.g., \fBint\fP, \fBchar *\fP, \fBchar\fP, etc.)
.UNINDENT
.IP 2. 3
.INDENT 3.0
.TP
.B One boolean member indicating if an option was used
This member is always typed as \fBchar\fP and its name has the form
\fBNAME_present\fP where \fBNAME\fP is the name of the member
corresponding to the option (i.e., \fBNAME\fP is identical to the
member name mentioned in the step 1. above). See an example
later on for more details.
.UNINDENT
.UNINDENT
.sp
The default prefix for all the generated symbols is \fBmain\fP\&. i.e., the
option parsing function is called \fBopt_parse()\fP, the \fBstruct\fP
defining the options is called \fBstruct opt_opt\fP etc.
.sp
The prefix used in the generated symbols can be changed by the %prefix
directive inside the option specification file or by the \fB\-\-sym\-prefix\fP
command line option. When both are specified, the directive inside the
option specification file takes precedence (i.e., the command line
option \fB\-\-sym\-prefix\fP is ignored).
.SS Example Usage
.sp
Let us assume that the input file describing the command line options is
opt.in. And, let us assume that it contains:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# example option file opt.in

%description "Example program to show mkgetopt.py"

# format:
# long\-opt short\-opt  struct\-member\-name type default\-value description

 jobs      j   njobs       int   1          "Use \(aqJ\(aq jobs simultaneously"
 use\-proxy \-   use_proxy_p bool false       "Use the default proxy server"
 foreground f  fg_p        bool false       "Run in the foreground"
 debug      \-  debug       string "syslog"  "Send debug messages to \(aqD\(aq"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then, the following call will generate two files opt.c and opt.h.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mkgetopt.py opt.in
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The file opt.h has the following struct definitions:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
struct opt_option
{
    char * const* argv_inputs;
    int     argv_count;

    int njobs;
    int use_proxy_p;
    int fg_p;
    char * debug;

    char njobs_present;
    char use_proxy_p_present;
    char fg_p_present;
    char debug_present;
};
typedef struct opt_option opt_option;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that for each command line option, there is a corresponding "flag"
variable of the form \fBNAME_present\fP where \fBNAME\fP is one of
\fBnjobs\fP \fBuse_proxy_p\fP \fBfg_p\fP \fBdebug\fP These \fBNAME_present\fP
flags are lit
whenever the corresponding command line option is present(or used).
.sp
The file opt.c contains the implementation of \fBopt_parse()\fP
.sp
These two files are used as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <stdio.h>

// this auto\-generated .h file provides definitions for
// opt_opt and opt_parse()
#include "opt.h"


int main(int argc, char * argv [])
{
    // Define an instance of the struct defined in opt.h
    opt_opt    opt;

    memset(&opt, 0, sizeof(opt));

    if ( 0 != opt_parse(&opt, argc, argv) )
        exit (1);


    if ( opt.use_proxy_p )
    {
        // setup to handle communication via default proxy server
        // ...
    }

    if ( 0 == strcmp(opt.debug, "syslog") )
    {
        // setup debug via syslog
    }
    else if ( 0 == strncmp(opt.debug, "/", 1) )
    {
        // setup debug via a file in the file\-system
    }
    else if ( 0 == strncmp(opt.debug, "tcp://", 6) )
    {
        // setup debug via network logging
    }

    if ( opt.jobs > 1 )
    {
        // fork n copies of self to handle multiple jobs
    }

    // .. other stuff.

    return 0;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As you can see, parsing the options is very easy. All the messy logic of
dealing with long and short options are handled by opt.c.
.SH INPUT FILE FORMAT
.sp
The input file consists of one or more lines. Each line can be a comment
line, a directive or an option line.
.SS Comment Lines
.sp
Comment lines begin with the \(aq#\(aq character. Comments are recognized if
and only if \(aq#\(aq is the first non white\-space character of a line.
.sp
Empty lines or lines consisting of \fIall\fP white spaces are treated as
comment lines.
.sp
e.g.,:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# This is a comment line
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Directive Lines
.sp
Directives change the default or builtin behaviour of
\fBmkgetopt.py\fP They also provide hooks to augment the
(often simplistic) default behaviour.
.sp
Some of the default behaviour(s) can be changed via the command line
options. However, directives (if present) always over\-ride the command
line options. Thus, it is recommended that programmers use directives
whenever possible.
.sp
It is always best to set the directives at the beginning of the input
file to make its meaning clear.
.sp
Each directive starts with "%" character and is immediately followed by
a word. The available directives are:
.INDENT 0.0
.TP
.B \fB%description\fP
Provide a one line textual description of the program in question.
If a multi\-line description is required, then use multiple
%description directives.
.sp
An example of a single line description:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# One line description
%description "A utility to resolve conflicts"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An example of a multi\-line description:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
%description "A utility to perform checks on file\-systems"
%description "using cryptographic techniques to store checksums"
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB%usage_call\fP
In cases where the usage needs to be more detailed and possibly
involving other conditions (\fB#define\fP, etc.), this directive
provides a hook to use a user\-defined callback function to return a
string containing the usage. The argument to this directive is the
name of a function that will be called to obtain the usage string.
Such a function must have "C" linkage and the following
prototype:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
const char * FUNCTION_NAME (void)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
e.g.,:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
%usage_call  myprog_usage_string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And, the programmer must define a function called
\fBmyprog_usage_string()\fP as follows:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
const char * myprog_usage_string ()
{
    static char buf[1024];

    // body of this function to generate the usage string
    // via some means

    return buf;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB%prefix\fP
This directive is similar to the \-\-sym\-prefix command line option.
When present, it overrides the command line option. It defines the
prefix to be used for all generated symbols such as functions,
struct tags, etc.
.sp
e.g.,:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
%prefix     foo_opt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above example, the tool will use the prefix \fBfoo_opt\fP for all
"C" symbols it generates. The default prefix is \fBopt\fP\&.
.sp
This option is very important as it allows multiple instances of
command line parsing routines to be used within a single program.
e.g., in an application which has "subcommands" with options ala CVS
or SVN.
.TP
.B \fB%nopermute\fP
This directive tells the underlying \fBgetopt_long()\fP option parser
not to \fIpermute\fP command line flags. See the man pages for
\fBgetopt_long()\fP for more details.
.sp
This option is useful when the order of options matter. e.g., in a
tool such as CVS or SVN, one would use this directive for parsing
the "global" options to the command (i.e., options that come before
the sub\-command). A second option parsing input file will NOT use
this directive (e.g., when used to parse options for sub\-commands).
.sp
The default is to permute arguments.
.TP
.B \fB%noversion\fP
This directive tells the tool NOT to generate any functions or flags
that display the programs version i.e., do not recognize the
\fB\-\-version\fP command line option. Here, the term "program" refers to
the final program that uses the output generated by this tool.
.sp
The default is to recognize the options \fB\-\-version\fP and \fB\-v\fP
.TP
.B \fB%nohelp\fP
This directive tells the tool NOT to generate any functions or flags
that display "help" i.e., do not recognize the \fB\-\-help\fP command line
option. Here, the term "program" refers to the final program that
uses the output generated by this tool.
.sp
The default is to recognize the options \fB\-\-help\fP \fB\-h\fP\&.
.UNINDENT
.SS Option lines
.sp
Option lines are the most important part of the input specification.
Each option line describes one command line option that your program
will be handling. Each option line consists of 6 different "fields".
Each field is separated by one or more white spaces. The content for
each field can be quoted via single or double quotes. The fields are:
.INDENT 0.0
.IP 1. 3
Long option name:
.sp
This field is the GNU style long option name. If you don\(aqt have a
long option name, use a lone \(aq"\-"\(aq symbol ("dash" or "minus").
.IP 2. 3
Short option character:
.sp
This field is a one\-character option name for the corresponding long
option (above). If you don\(aqt have a long option name, use a lone
\(aq"\-"\(aq symbol ("dash" or minus").
.IP 3. 3
Member Name (within the option struct):
.sp
This field is the name of the struct member that will hold the
result when the user uses either the long or short option. This name
must be a valid C identifier.
.sp
If both short & long options are missing (i.e., they are both
\(aq"\-"\(aq), then the option line is treated as a "place holder" for a
struct member of the given type. In this case, the generated
functions do not use such a member variable in any way; it is
present in the generated header file (\fBstruct opt_option\fP) for use
by the programmer in whatever fashion they choose.
.IP 4. 3
Option Type:
.sp
This field denotes the type of the option (e.g., \fBint\fP,
\fBstring\fP,
\fBboolean\fP etc.). This is translated into the nearest C data type.
e.g., \fBboolean\fP is translated into an \fBint\fP; \fBstring\fP is translated
into a \fBchar *\fP\&.
.IP 5. 3
default value for the option
.sp
If the option should have a default value, this this field must have
an appropriately typed default value.
.IP 6. 3
Description (or help string) for the option:
.INDENT 3.0
.INDENT 3.5
This field contains a descriptive & brief help string for this
particular option. It will be displayed automatically when the user
types \fB\-\-help\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
e.g., to describe a command line option to denote whether the program
must run in the foreground or not, the following is the option
line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# long\-opt short\-opt  member\-name type default description
foreground    f       stay_in_fg  bool false   "Keep program in foreground"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above example, the long option that your final program will
recognize is \fB\-\-foreground\fP, and the corresponding short option is
\fB\-f\fP\&.
Using this option will set the struct member called \fBstay_in_fg\fP to
"true" (1). If the command line option is not used, the member
\fBstay_in_fg\fP will have the default value of "false".
.SS Option Types
.sp
Option type can be one of the following:
.INDENT 0.0
.TP
.B \fBshort\fP:
A signed 2 byte quantity
.TP
.B \fBint\fP:
A signed 4 byte quantity
.TP
.B \fBlong\fP:
A signed 4 (or 8 byte) quantity
.TP
.B \fBushort\fP:
An unsigned 2 byte quantity
.TP
.B \fBuint\fP:
An unsigned 4 byte quantity
.TP
.B \fBulong\fP:
An unsigned 4 (or 8 byte) quantity
.TP
.B \fBstring\fP:
A null terminated string (\fBchar *\fP)
.TP
.B \fBflag\fP, \fBboolean\fP:
A flag or boolean option; represented in the C program as an \fBint\fP\&.
.TP
.B \fBcallback\fP, \fBcallback_arg\fP:
A C function pointer name. This function pointer should have
the following signature:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
void (*)(struct option * opt, char * optarg)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The struct \fBstruct option\fP is the struct that will be defined by
this script and it will hold the command line option parsing results
(it will be named appropriately by honoring any sym\-prefix
settings).
.sp
The \fBcallback\fP type does not take an mandatory argument to the option
(i.e., \fBoptarg\fP will always be NULL in the callback function) while
the \fBcallback_arg\fP variant will \fIalways\fP take a mandatory argument to
be passed to the callback function.
.UNINDENT
.sp
A type can optionally have a suffix of "\fB?\fP". In such a case, the argument
to that command line option is considered optional. e.g. consider the
following input line specification:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
debug   d debug_level  int?  0 "Debug Level"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then, if the command line invocation of this option is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-debug
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then, the member \fBdebug_level\fP is set to 1 \-\- since it was invoked once.
On the other hand, if the program invocation of this option is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-debug \-\-debug \-\-debug
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then, the member \fBdebug_level\fP is set to 3 \-\- indicating it was called
"3" times. Further more, if the invocation of this option is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-debug=180
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then, the member \fBdebug_level\fP is set to 180 (which is the argument to
this option).
.sp
In any case, the "flag" member \fBdebug_present\fP is set to 1 \- to indicate
that the option was used.
.SS Required vs. Optional Fields
.sp
All types except "flag", "boolean" and "callback" take arguments. By
default, the arguments are \fIrequired\fP\&.
.SH EXAMPLES
.sp
The sections below show several examples to illustrate the various
combinations of directives and options.
.SS Simple example file
.sp
The following is a simple example input file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
%description "Example program to show mkgetopt.py"

# format:
# long\-opt short\-opt  struct\-member\-name type default\-value description

jobs      j   njobs       int   1          "Use \(aqJ\(aq jobs simultaneously"
use\-proxy \-   use_proxy_p bool false       "Use the default proxy server"
foreground f  fg_p        bool false       "Run in the foreground"
debug      \-  debug       string "syslog"  "Send debug messages to \(aqD\(aq"
log\-level  L  loglevel    int?  0          "Default log level"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When "mkgetopt.py" is invoked as "mkgetopt.py example.in", it generates
two files: example.c and example.h. The header file example.h contains
the definition of the following structure:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
struct opt_option
{
    /* Points to remaining/unconsumed command line arguments.
     * These are unconsumed either because:
     *   1. The argument parsing was explicitly stopped by use of
     *      the "\-\-" command line option.
     *   2. There are no more options (starting with "\-" or "\-\-")
     */
    char * const * argv_inputs;

    /*
     * Contains a count of remaining command line arguments in
     * \(aqargv_inputs\(aq above.
     */
    int     argv_count;

    int somevar;
    int njobs;
    int use_proxy_p;
    int fg_p;
    char * debug;
    int loglevel;

    char njobs_present;
    char use_proxy_p_present;
    char fg_p_present;
    char debug_present;
    char loglevel_present;
};
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that for each option variable mentioned in the 3rd field of the
input file, there is a corresponding variable in \fBstruct opt_option\fP\&.
Furthermore, for each such variable, there is a corresponding flag
variable of the form \fBNAME_present\fP where "NAME" is the name of the
option variable.
.SS A More Complex Example File
.sp
The following example illustrates the use of callback functions and
place holder variables. Let us continue with the previous example and
expand on it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
%description "Example program to show mkgetopt.py"

# format:
# long\-opt short\-opt  struct\-member\-name type default\-value description

little\-endian L     little_end_cb   callback    "Use little\-endian format"
big\-endian    B     big_end_cb      callback    "Use big\-endian format"

# We will use this place holder var for use by the callback function
\-             \-     use_little_end  int

jobs      j   njobs       int   1          "Use \(aqJ\(aq jobs simultaneously"
use\-proxy \-   use_proxy_p bool false       "Use the default proxy server"
foreground f  fg_p        bool false       "Run in the foreground"
debug      \-  debug       string "syslog"  "Send debug messages to \(aqD\(aq"

log\-level  l  loglevel    int?  0          "Default log level"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The output structure generated by "mkgetopt.py" has the following struct
definition:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
struct opt_option
{
    /* Points to remaining/unconsumed command line arguments.
     * These are unconsumed either because:
     *   1. The argument parsing was explicitly stopped by use of
     *      the "\-\-" command line option.
     *   2. There are no more options (starting with "\-" or "\-\-")
     */
    char * const * argv_inputs;

    /*
     * Contains a count of remaining command line arguments in
     * \(aqargv_inputs\(aq above.
     */
    int     argv_count;

    int help;
    int version;
    void (*little_end_cb)(struct opt_option *, char* arg);
    void (*big_end_cb)(struct opt_option *, char* arg);
    int use_little_end;
    int njobs;
    int use_proxy_p;
    int fg_p;
    char* debug;
    int loglevel;


    /*
     * Boolean flags to denote if any of above vars were recognized
     * during command line processing
     */
    char help_present;
    char version_present;
    char little_end_cb_present;
    char big_end_cb_present;
    char njobs_present;
    char use_proxy_p_present;
    char fg_p_present;
    char debug_present;
    char loglevel_present;

};
typedef struct opt_option opt_option;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Our intention is to recognize the option \fB\-\-little\-endian\fP and set the
place holder variable \fBuse_little_end\fP\&. If the option
\fB\-\-big\-endian\fP is
set, we want to \fIreset\fP the place holder variable. i.e., no matter how
many times the two options are chosen, we always want the place holder
variable \fBuse_little_end\fP to hold the correct value.
.sp
In order to accomplish this, we will write two callback functions to
match \fBopt_option::little_end_cb\fP and \fBopt_option::big_end_cb\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
static void do_little_end(opt_option * opt, char * arg_unused)
{
    opt\->use_little_end = 1; /* Set the place holder var */
}

static void do_big_end(opt_option * opt, char * arg_unused)
{
    opt\->use_little_end = 0; /* Reset the place holder var */
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Next, in "main()" we will do the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
int main(int argc, char * argv[])
{
    opt_option opt;

    memset(&opt, 0, sizeof opt);

    /* Setup the two callback functions */
    opt.little_end_cb   = do_little_end;
    opt.big_end_cb      = do_big_end;

    /* Lets say that by default, we want "use_little_end" to be
     * true.
     */
     opt.use_little_end = 1;

    if ( 0 != opt_parse (&opt, argc, argv) )
        exit (1);

    /*
     * Now, use_little_end will be 0 or 1 and nothing else.
     */
    if (opt.use_little_end)
    {
        /* Do stuff  .. */
    }
    else
    {
        /* do other stuff .. */
    }

    ...
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The above example shows how to use callback functions and "mkgetopt.py".
.SH AUTHOR
.sp
This program is written by Sudhi Herle <sudhi\-at\-herle.net>.
.SH LICENSE
.sp
This script is licensed under the GNU General Public License ("GPL")
version 2. Please see \fI\%http://www.gnu.org/licenses/gpl.html\fP for the terms
and conditions of GPL v2.
.sp
The code generated by this script is copyrighted by the author (Sudhi Herle).
It is licensed under a very liberal license (MIT like):
.INDENT 0.0
.INDENT 3.5
Copyright (c) 2005\-2015 Sudhi Herle <\fI\%sudhi@herle.net\fP>
.sp
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.sp
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
.sp
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
.UNINDENT
.UNINDENT
.SH BUGS
.sp
If you find any bugs in this script, please submit a patch.
.SH COLOPHON
.sp
This document is written using the reStructured Text markup language,
and published with the corresponding Python Docutils processing system.
Information is available at \fI\%http://docutils.sourceforge.net/\fP
.\" vim: ft=rst:sw=4:ts=4:expandtab:tw=82:notextmode:
.
.\" Generated by docutils manpage writer.
.
