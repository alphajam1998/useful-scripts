#! /usr/bin/env python
#
# Generate a random, valid MAC address
#
import random, binascii
import os, sys
import string, re
from optparse import Option, OptionParser, OptionValueError
from binascii import hexlify


Mfgprefix = [
    ('000569', 'VMWare'),
    ('000C29', 'VMWare'),
    ('001c14', 'VMWare'),
    ('005056', 'VMWare'),
    ('001c42', 'Parallels'),
    ('00163e', 'Xensource'),
    ]


def randhex(n=6):
    z = os.urandom(3)
    return "%02x:%02x:%02x" % (ord(z[0]), ord(z[1]), ord(z[2]))



def read_oui(fn):

    fd = open(fn, 'rb')
    
    pat = re.compile(r'^\s*([0-9A-F]{2}-[0-9A-F]{2}-[0-9A-F]{2})\s+\(hex\)\s+(.*)$', re.I)
    db = []
    for l in fd:
        if len(l) == 0:
            continue

        m = pat.match(l)
        if m is not None:
            pref = m.group(1)
            comp = m.group(2).strip()
            p  = pref.replace('-','')
            t  = (p, comp)
            db.append(t)
            #print "%s -- %s" % (p, comp)
        

    fd.close()
    return db


usage = """%s: Generate valid, Random Ethernet MAC address

Usage: %s [options]""" % (sys.argv[0], sys.argv[0])

parser = OptionParser(usage)
parser.add_option("", "--oui", dest="oui", type="string",
                  default=None, metavar='F',
                  help="Read the IEEE OUI database from file 'F' [%default]")
parser.add_option("-v", "--verbose", dest="verbose",
                  action="store_true", default=False,
                  help="Show verbose output [%default]")

opt, args = parser.parse_args()

if opt.oui is not None:
    db = read_oui(opt.oui)
else:
    db = Mfgprefix
    random.shuffle(db)
    


random.shuffle(db)
t = random.sample(db, 1)[0]
p = t[0]
pref = "%s:%s:%s" % (p[0:2], p[2:4], p[4:])
mac  = "%s:%s" % (pref.lower(), randhex())

if opt.verbose:
    print("%s  - %s" % (mac, t[1]))
else:
    print(mac)

# EOF
