#! /usr/bin/env python

#
# Hexlify stdin and write to stdout
#
# Author: Sudhi Herle <sw-at-herle-dot-net>
#
# License: GPLv2
#

import os, sys
from os.path import basename, dirname, abspath, normpath, join
from binascii import hexlify
from optparse import Option, OptionParser, OptionValueError

Z = basename(sys.argv[0])

def die(fmt, *args):
    warn(fmt, args)
    exit(1)

def warn(fmt, *args):
    sfmt = "%s: %s" % (Z, fmt)
    if args:
        sfmt = sfmt % args

    if not sfmt.endswith('\n'):
        sfmt += '\n'

    sys.stdout.flush()
    sys.stderr.write(sfmt)
    sys.stderr.flush()

def chunkify(outfd, b, n):
    z = len(b)
    while z > 0:
        r = n if z > n else z

        c  = b[:r]
        b  = b[r:]
        z -= r
        
        outfd.write(hexlify(c)+'\n')

def hexlate(infd, outfd, N, L):
    
    # always deal with whole chars

    # We provide one of two definitions for the closure pp()
    if L <= 0:
        def pp(b):
            outfd.write(hexlify(b))
    else:

        n = L / 2
        def pp(b):
            z = len(b)
            while z > 0:
                r = n if z > n else z

                c  = b[:r]
                b  = b[r:]
                z -= r
                
                outfd.write(hexlify(c)+'\n')

    if N > 0:
        b = infd.read(N)
        if b:
            pp(b)

    else:
        while True:
            b = infd.read(65536)
            if not b:
                break
            pp(b)




usage = """%(Z)s [options] [infile ..] [outfile]

%(Z)s - Convert input stream into hex and optionally break it into
multiple output lines.

""" % { 'Z': Z }

pp = OptionParser(usage=usage)
pp.add_option('-l', '--line-length', dest="linelen", action="store",
              default=0, type="int", metavar="N",
              help="Break output line into 'N' character chunks [%default]")
pp.add_option('-N', '--Nbytes', dest="N", action="store",
              default=0, type="int", metavar="N",
              help="Only read N bytes of input data (0 implies until EOF) [%default]")

opt, args = pp.parse_args()

out = sys.stdout
if len(args) > 1:
    outf = args[-1]
    args = args[:-1]
    try:
        out = open(outf, 'w')
    except Exception, ex:
        die("Can't create output file '%s': %s", outf, ex)

if len(args) > 0:
    for fn in args:
        try:
            infd = open(fn, 'r')
        except Exception, ex:
            warn("Can't read file '%s': %s", fn, ex)
            continue

        hexlate(infd, out, opt.N, opt.linelen)
        infd.close()

else:
    hexlate(sys.stdin, out, opt.N, opt.linelen)

# EOF
