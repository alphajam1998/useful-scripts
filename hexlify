#! /usr/bin/env python

#
# Hexlify stdin and write to stdout
#
# Author: Sudhi Herle <sw-at-herle-dot-net>
#
# License: GPLv2
#

import os, sys, base64
from os.path   import basename, dirname, abspath, normpath, join
from binascii  import hexlify
from optparse  import Option, OptionParser, OptionValueError
from functools import partial

Z = basename(sys.argv[0])

def die(fmt, *args):
    warn(fmt, args)
    exit(1)

def warn(fmt, *args):
    sfmt = "%s: %s" % (Z, fmt)
    if args: sfmt = sfmt % args

    if not sfmt.endswith('\n'): sfmt += '\n'

    sys.stdout.flush()
    sys.stderr.write(sfmt)
    sys.stderr.flush()

def chexlify(b):
    """like binascii.hexlify() except writes C like bytes"""
    return ', '.join(["%#2.2x" % ord(x) for x in b])

def hexlate(infd, outfd, b64, N, L, hexer, pref, suff, lf):
    """Transcribe bytes from 'infd' to 'outfd' in hex. Breakup lines
    into 'L' bytes. If 'N' is specified, read exactly 'N' bytes from
    'infd', else read until EOF.
    """

    outfd.write(pref)
    
    # We provide one of two definitions for the closure pp()
    if L < 2:
        def pp(b):
            outfd.write(hexer(b))
    else:
        l = L / 2
        def pp(b):
            z = len(b)
            while z > 0:
                r  = l if z > l else z
                c  = b[:r]
                b  = b[r:]
                z -= r

                outfd.write(hexer(c)+lf)

    inxform = base64.b64decode if b64 else lambda x: x

    if N > 0:
        b = infd.read(N)
        if b: pp(inxform(b))

    else:
        while True:
            b = infd.read(65536)
            if not b: break
            pp(inxform(b))

    outfd.write(suff)



usage = """%(Z)s [options] [infile ..] [outfile]

%(Z)s - Convert input stream into hex and optionally break it into
multiple output lines.

""" % { 'Z': Z }

pp = OptionParser(usage=usage)
pp.add_option('-L', '--line-length', dest="linelen", action="store",
              default=0, type="int", metavar="N",
              help="Break output line into 'N' character chunks [%default]")
pp.add_option('-n', '--Nbytes', dest="N", action="store",
              default=0, type="int", metavar="N",
              help="Only read N bytes of input data (0 implies until EOF) [%default]")
pp.add_option('-b', '--base64', dest='b64', action="store_true", default=False,
              help="Base64 decode the input first [%default]")
pp.add_option('-c', '--c-type', dest="ctype", action="store_true", default=False,
              help="Generate a C like array definition [%default]")

opt, args = pp.parse_args()

out = sys.stdout
if len(args) > 1:
    outf = args[-1]
    args = args[:-1]
    try:
        out = open(outf, 'w')
    except Exception, ex:
        die("Can't create output file '%s': %s", outf, ex)

barehex = partial(hexlate, N=opt.N, L=opt.linelen, hexer=hexlify, pref='',    suff='\n', lf="\n")
chex    = partial(hexlate, N=opt.N, L=opt.linelen, hexer=chexlify, pref="{\n", suff="}\n", lf=",\n")

hexify = chex if opt.ctype else barehex

if len(args) > 0:
    for fn in args:
        try:
            infd = open(fn, 'rb')
        except Exception, ex:
            warn("Can't read file '%s': %s", fn, ex)
            continue

        hexify(infd, out, opt.b64)
        infd.close()

else:
    hexify(sys.stdin, out, opt.b64)

# EOF
